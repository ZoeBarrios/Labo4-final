CREATE TRIGGER trg_InsertPurchasePublication     
ON 
Purchases  AFTER INSERT      
AS     
BEGIN       
	INSERT INTO PurchasePublication (PublicationId, PurchaseId)  
	SELECT TOP 1 p.PublicationId, i.PurchaseId 
	FROM Publications p 
	INNER JOIN Purchases i ON i.SellerId = p.UserId 
	WHERE NOT EXISTS (     
	SELECT 1 FROM PurchasePublication pp     
	WHERE pp.PublicationId = p.PublicationId    
	AND pp.PurchaseId = i.PurchaseId  )  
	ORDER BY i.PurchaseDate 
	DESC; 
END;

CREATE TRIGGER trg_UpdateStockAndIsPaused  
ON 
Purchases  AFTER INSERT  
AS  
BEGIN      
	UPDATE p SET Stock = CASE 
	WHEN p.Stock > 0 THEN p.Stock - 1         
	ELSE 0      
	END      
	FROM Publications p     
	INNER JOIN PurchasePublication pp ON p.PublicationId = pp.PublicationId     
	INNER JOIN inserted i ON pp.PurchaseId = i.PurchaseId;       
	UPDATE p SET isPaused = CASE         
	WHEN p.Stock <= 0 THEN 1         
	ELSE p.isPaused     
	END      
	FROM Publications p     
	INNER JOIN PurchasePublication pp ON p.PublicationId = pp.PublicationId     
	INNER JOIN inserted i ON pp.PurchaseId = i.PurchaseId;  

CREATE TRIGGER trg_PurchasesInsertNotification  
ON
Purchases AFTER INSERT   
AS     
BEGIN          
	DECLARE @PublicationId INT,
	@BuyerId INT,
	@SellerId INT; 
	SELECT @BuyerId = i.UserId, @PublicationId = pp.PublicationId,@SellerId = i.Sellerid    
	FROM Purchases i            
	INNER JOIN PurchasePublication pp ON i.PurchaseId = pp.PurchaseId     
	INNER JOIN Publications p ON pp.PublicationId = p.PublicationId;      
	EXEC InsertNotification @PublicationId = @PublicationId,@BuyerId = @BuyerId,@SellerId = @SellerId     
END;
END;

